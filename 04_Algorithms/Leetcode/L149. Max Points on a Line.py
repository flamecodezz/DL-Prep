class Solution:
    def maxPoints(self, points):
        if points == [] or points == [[]]:
            return 0
        elif len(points) == 1:
            return 1

        kbDict, freqDict, k, b, newpoints, lenPoint = {}, {}, 0, 0, [], len(points)
        for i in range(lenPoint):
            if not points[i] in newpoints:
                newpoints.append(points[i])
                freqDict[(points[i][0], points[i][1])] = 1
            else:
                freqDict[(points[i][0], points[i][1])] += 1
        print('freqDict', freqDict)

        for i in range(len(newpoints)):
            for j in range(i + 1, len(newpoints)):
                if not newpoints[i][0] == newpoints[j][0]:
                    k = (newpoints[i][1] - newpoints[j][1]) / (newpoints[i][0] - newpoints[j][0])
                    b = newpoints[i][1] - k * newpoints[i][0]
                    print(k, b)
                    k, b = int(round(k * 100)) / 100, int(round(b * 100)) / 100

                key = [(k, b), newpoints[i][0]][newpoints[i][0] == newpoints[j][0]]

                if key in kbDict:
                    if not j in kbDict[key]:
                        kbDict[key].append(j)
                else:
                    kbDict[key] = [i, j]

        print('kbDict', kbDict)
        print('freqDict', freqDict)
        maxval = 0
        if kbDict == {}:
            return freqDict[(newpoints[0][0], newpoints[0][1])]
        for item in kbDict:
            sumval = 0
            for idx in kbDict[item]:
                sumval += freqDict[(newpoints[idx][0], newpoints[idx][1])]
            if sumval > maxval:
                maxval = sumval

        return maxval


sol = Solution()
# print(sol.maxPoints([[1,1],[2,2],[3,3]]))
print(sol.maxPoints([[0, 0], [94911151, 94911150], [94911152, 94911151]]))  # 2
# print(sol.maxPoints([[1,1],[3,2],[5,3],[4,1],[2,3],[1,4]]))
# print(sol.maxPoints([[1432,1342428303],[3*1432,3*1342428303],[10*1432,10*1342428303]]))
# print(sol.maxPoints([[0,0],[0,1],[0,20]]))
# print(sol.maxPoints([[0,0],[1,1],[0,0]]))
# print(sol.maxPoints([[-435,-347],[-435,-347],[609,613],[-348,-267],[-174,-107],[87,133],[-87,-27],[-609,-507],[435,453],[-870,-747],[-783,-667], #11
# 	                 [0,53],[-174,-107],[783,773],[-261,-187],[-609,-507],[-261,-187],[-87,-27],[87,133],[783,773],[-783,-667],[-609,-507],[-435,-347], #12
# 	                 [783,773],[-870,-747],[87,133],[87,133],[870,853],[696,693],[0,53],[174,213],[-783,-667],[-609,-507],[261,293],[435,453],[261,293],[435,453]])) #14
# print(sol.maxPoints([[-240,-657],[-27,-188],[-616,-247],[-264,-311],[-352,-393],[-270,-748],[3,4],[-308,-87],[150,526],[0,-13],[-7,-40],[-3,-10],
# 	                 [-531,-892],[-88,-147],[4,-3],[-873,-555],[-582,-360],[-539,-207],[-118,-206],[970,680],[-231,-47],[352,263],[510,143],[295,480],
# 	                 [-590,-990],[-236,-402],[308,233],[-60,-111],[462,313],[-270,-748],[-352,-393],[-35,-148],[-7,-40],[440,345],[388,290],[270,890],
# 	                 [10,-7],[60,253],[-531,-892],[388,290],[-388,-230],[340,85],[0,-13],[770,473],[0,73],[873,615],[-42,-175],[-6,-8],[49,176],[308,222],
# 	                 [170,27],[-485,-295],[170,27],[510,143],[-18,-156],[-63,-316],[-28,-121],[396,304],[472,774],[-14,-67],[-5,7],[-485,-295],[118,186],
# 	                 [-154,-7],[-7,-40],[-97,-35],[4,-9],[-18,-156],[0,-31],[-9,-124],[-300,-839],[-308,-352],[-425,-176],[-194,-100],[873,615],[413,676],
# 	                 [-90,-202],[220,140],[77,113],[-236,-402],[-9,-124],[63,230],[-255,-118],[472,774],[-56,-229],[90,228],[3,-8],[81,196],[970,680],
# 	                 [485,355],[-354,-598],[-385,-127],[-2,7],[531,872],[-680,-263],[-21,-94],[-118,-206],[616,393],[291,225],[-240,-657],[-5,-4],[1,-2],
# 	                 [485,355],[231,193],[-88,-147],[-291,-165],[-176,-229],[154,153],[-970,-620],[-77,33],[-60,-111],[30,162],[-18,-156],[425,114],[-177,-304],
# 	                 [-21,-94],[-10,9],[-352,-393],[154,153],[-220,-270],[44,-24],[-291,-165],[0,-31],[240,799],[-5,-9],[-70,-283],[-176,-229],[3,8],[-679,-425],
# 	                 [-385,-127],[396,304],[-308,-352],[-595,-234],[42,149],[-220,-270],[385,273],[-308,-87],[-54,-284],[680,201],[-154,-7],[-440,-475],[-531,-892],
# 	                 [-42,-175],[770,473],[118,186],[-385,-127],[154,153],[56,203],[-616,-247]]))    #24
